
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URI")
}

model User {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  email               String   @unique
  phoneNumber         String
  gender              String
  dateOfBirth         String
  country             String
  city                String
  connectionStyles    String
  communicationStyles String
  socialStyles        String
  healthAndFitness    String
  family              String
  spirituality        String
  politicalNews       String
  incorrectHumor      String
  kindOfPeople        String[]
  password            String
  isLoggedIn          Boolean  @default(false)
  isVerified          Boolean  @default(false)
  createdAt           DateTime @default(now())
  cafeId              String?  @db.ObjectId

  cafe                Cafe? @relation(fields: [cafeId], references: [id])

  eventParticipants   EventParticipant[]

  age                 Int?
  interests           String?
  payment             Payment[]
  
  subscriptionActive  Boolean @default(false)
  subscriptionEndsAt  DateTime?
  subscriptionCredits Int @default(0)
}

model Location {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  city      String
  country   String
  imageUrl  String
  cafes     Cafe[]
  createdAt DateTime @default(now())

  // New field from spec
  timezone String?
  events   Event[]
}

model Cafe {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  locationId String   @db.ObjectId
  address    String
  createdAt  DateTime @default(now())
  imageUrl   String

  location Location @relation(fields: [locationId], references: [id])
  users    User[]
  events   Event[]

  // From spec
  capacity Int?
  contact  String?

  matchGroups MatchGroup[]
}

model Event {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  date      DateTime
  city      String
  country   String
  cafeId    String?  @db.ObjectId
  cafe      Cafe?    @relation(fields: [cafeId], references: [id])
  createdAt DateTime @default(now())
  isClosed  Boolean  @default(false)

  createdBy String @db.ObjectId
  admin     Admin  @relation(fields: [createdBy], references: [id])

  participants EventParticipant[]

  matchGroups MatchGroup[]
  payment     Payment[]

  // Additional event properties from spec
  locationId   String?   @db.ObjectId
  location     Location? @relation(fields: [locationId], references: [id])
  bookingOpen  DateTime? // opens before event
  bookingClose DateTime? // closes before event
  status       String? // 'Open', 'Closed', 'Completed'
}

model EventParticipant {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  userId   String   @db.ObjectId
  eventId  String   @db.ObjectId
  joinedAt DateTime @default(now())

  status String? 

  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])
}

model MatchGroup {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  eventId   String   @db.ObjectId
  members   String[] // user IDs array
  createdAt DateTime @default(now())

  event Event @relation(fields: [eventId], references: [id])

  // Added from Groups spec
  cafeId      String? @db.ObjectId
  groupNumber Int?
  cafe        Cafe?   @relation(fields: [cafeId], references: [id])
}

model Admin {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  email      String  @unique
  password   String
  isLoggedIn Boolean @default(false)

  events Event[]
}


model Payment {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @db.ObjectId
  eventId         String   @db.ObjectId
  stripeSessionId String
  mode            String   
  status          String   
  createdAt       DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])
}
